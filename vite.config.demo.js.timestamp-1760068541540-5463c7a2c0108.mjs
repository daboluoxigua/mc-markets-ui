// vite.config.demo.js
import { fileURLToPath, URL } from "node:url";
import { defineConfig } from "file:///D:/project/newmc/mc-ui/node_modules/vite/dist/node/index.js";

// vite/plugins/index.js
import vue from "file:///D:/project/newmc/mc-ui/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import vueJsx from "file:///D:/project/newmc/mc-ui/node_modules/@vitejs/plugin-vue-jsx/dist/index.mjs";

// vite/plugins/inspector.js
import Inspector from "file:///D:/project/newmc/mc-ui/node_modules/vite-plugin-vue-inspector/dist/index.mjs";
function createInspector() {
  if (process.env.NODE_ENV === "development" && process.env.VUE_INSPECTOR === "true") {
    return Inspector({
      // 减少性能开销
      enabled: true
    });
  }
  return null;
}

// vite/plugins/auto-import.js
import autoImport from "file:///D:/project/newmc/mc-ui/node_modules/unplugin-auto-import/dist/vite.js";
import { ElementPlusResolver } from "file:///D:/project/newmc/mc-ui/node_modules/unplugin-vue-components/dist/resolvers.mjs";
function createAutoImport() {
  return autoImport({
    imports: [
      "vue",
      "vue-router",
      "pinia"
    ],
    resolvers: [ElementPlusResolver()],
    dirs: [
      "./src/utils/composables/**"
    ],
    // 禁用 TypeScript 声明文件生成
    dts: false,
    // 开发环境优化
    ...process.env.NODE_ENV === "development" && {
      // 减少文件监听
      cache: true,
      // 禁用不必要的功能
      vueTemplate: false
    }
  });
}

// vite/plugins/components.js
import components from "file:///D:/project/newmc/mc-ui/node_modules/unplugin-vue-components/dist/vite.mjs";
import { ElementPlusResolver as ElementPlusResolver2 } from "file:///D:/project/newmc/mc-ui/node_modules/unplugin-vue-components/dist/resolvers.mjs";
function createComponents() {
  return components({
    dirs: ["src/components"],
    include: [/\.vue$/, /\.vue\?vue/, /\.jsx$/],
    // 禁用 TypeScript 声明文件生成
    dts: false,
    resolvers: [
      ElementPlusResolver2({
        importStyle: "sass"
      })
    ]
    // ElementPlus按需加载
  });
}

// vite/plugins/index.js
function createVitePlugins() {
  const vitePlugins = [vue(), vueJsx()];
  vitePlugins.push(createInspector());
  vitePlugins.push(createAutoImport());
  vitePlugins.push(createComponents());
  return vitePlugins;
}

// vite.config.demo.js
var __vite_injected_original_import_meta_url = "file:///D:/project/newmc/mc-ui/vite.config.demo.js";
var vite_config_demo_default = defineConfig({
  plugins: [
    ...createVitePlugins()
  ],
  server: {
    hmr: {
      overlay: false
    },
    port: 3e3,
    open: true
  },
  css: {
    preprocessorOptions: {
      scss: {
        silenceDeprecations: ["legacy-js-api"]
      }
    }
  },
  build: {
    outDir: "demo-dist",
    // 演示站点输出目录
    assetsDir: "assets",
    sourcemap: false,
    minify: "esbuild",
    // 使用 esbuild 进行压缩，更快且无需额外依赖
    rollupOptions: {
      output: {
        manualChunks: {
          "vue-vendor": ["vue", "vue-router"],
          "element-vendor": ["element-plus"],
          "ui-vendor": ["@mc-markets/ui"]
        }
      }
    },
    // esbuild 压缩配置
    esbuild: {
      drop: ["console", "debugger"]
    },
    // 复制 public 目录下的文件
    copyPublicDir: true
  },
  resolve: {
    alias: {
      "@": fileURLToPath(new URL("./src", __vite_injected_original_import_meta_url)),
      "@packages": fileURLToPath(new URL("./packages", __vite_injected_original_import_meta_url)),
      "@mc-markets/ui": fileURLToPath(new URL("./packages", __vite_injected_original_import_meta_url))
    }
  },
  // 演示站点特定配置
  base: "/mc-markets-ui/",
  define: {
    __VUE_OPTIONS_API__: true,
    __VUE_PROD_DEVTOOLS__: false
  }
});
export {
  vite_config_demo_default as default
};
//# sourceMappingURL=data:application/json;base64,
